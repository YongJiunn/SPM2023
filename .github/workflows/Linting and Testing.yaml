name: Check PR Name, Lint Frontend, Format Backend, Run Backend Tests

on:
  push:
    branches:
      - main
  pull_request:
    types:
      - opened
      - synchronize

env:
  NODE_VERSION: "18.x"

jobs:
  backend-ci:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout cocde
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"

      - name: Install Python Virtual ENV
        run: pip3 install virtualenv

      - name: Setup virtual environment
        uses: actions/cache@v3
        id: cache-venv
        with:
          path: venv
          key: ${{ runner.os }}-venv-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-venv-

        # Step 5
      - name: Activate and Install Depencies into Virtual env
        working-directory: sbrb-backend
        run: python -m venv venv && source venv/bin/activate &&
          pip3 install -r requirements.txt
        if: steps.cache-venv.outputs.cache-hit != 'true'
      # Step 6
      - name: Activate venv and Run Test
        working-directory: sbrb-backend
        run: . venv/bin/activate && pytest

      # Step 7
      - name: Create Zipfile archive of Dependencies
        working-directory: sbrb-backend
        run: |
          cd venv/lib/python3.9/site-packages
          zip -r9 ../../../../../../api.zip .

      # Step 8
      - name: Add App to Zip file
        run: zip -g ../../api.zip -r .

      # Step 9
      - name: Upload zip file artifact
        uses: actions/upload-artifact@v2
        with:
          name: api
          path: sbrb-backend/api.zip
  backend-cd:
    runs-on: ubuntu-latest
    needs: [backend-ci]
    if: github.ref == 'refs/heads/main'
    steps:
      # Step 1
      - name: Install AWS CLI
        uses: unfor19/install-aws-cli-action@v1
        with:
          version: 1
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
      # Step 2
      - name: Download Lambda api.zip
        uses: actions/download-artifact@v2
        with:
          name: api
      # Step 3
      - name: Upload to S3
        run: aws s3 cp api.zip s3://gh-bucket-kkk/api.zip
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
      # Step 4
      - name: Deploy new Lambda
        run: aws lambda update-function-code --function-name gh-lambda --s3-bucket gh-bucket-kkk --s3-key api.zip
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
